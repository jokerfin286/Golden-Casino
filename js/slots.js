document.addEventListener('DOMContentLoaded', function() {
    // –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    const slotGrid = document.getElementById('slotGrid');
    const slotScreen = document.getElementById('slotScreen');
    const spinButton = document.getElementById('spinSlots');
    const betAmountElement = document.getElementById('slotsBetAmount');
    const linesAmountElement = document.getElementById('linesAmount');
    const decreaseBetButton = document.getElementById('decreaseSlotsBet');
    const increaseBetButton = document.getElementById('increaseSlotsBet');
    const decreaseLinesButton = document.getElementById('decreaseLines');
    const increaseLinesButton = document.getElementById('increaseLines');
    const maxBetButton = document.getElementById('maxSlotsBet');
    const themeButtons = document.querySelectorAll('.theme-btn');
    const paylines = document.querySelectorAll('.payline');
    const winMessageElement = document.getElementById('slotsWinMessage');
    const slotContainer = document.querySelector('.video-slot');
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã
    let betAmount = 25;
    let linesAmount = 20;
    let isSpinning = false;
    const maxBet = 100;
    const minBet = 5;
    const maxLines = 20;
    const minLines = 1;
    
    // –°–∏–º–≤–æ–ª—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–µ–º —Å –≤–µ—Å–∞–º–∏ –∏ –≤—ã–ø–ª–∞—Ç–∞–º–∏
    const themeSymbols = {
        egypt: [
            { symbol: 'üè∫', weight: 20, payout: 5 },
            { symbol: 'üëë', weight: 15, payout: 10 },
            { symbol: 'üê™', weight: 20, payout: 5 },
            { symbol: 'üîÆ', weight: 10, payout: 15 },
            { symbol: 'üêç', weight: 15, payout: 10 },
            { symbol: 'üëÅÔ∏è', weight: 5, payout: 25 },
            { symbol: 'üïå', weight: 10, payout: 15 },
            { symbol: 'üê´', weight: 5, payout: 25 }
        ],
        fruits: [
            { symbol: 'üçé', weight: 20, payout: 5 },
            { symbol: 'üçå', weight: 20, payout: 5 },
            { symbol: 'üçá', weight: 15, payout: 10 },
            { symbol: 'üçí', weight: 10, payout: 15 },
            { symbol: 'üçã', weight: 15, payout: 10 },
            { symbol: 'üçâ', weight: 10, payout: 15 },
            { symbol: 'üçì', weight: 5, payout: 25 },
            { symbol: 'ü•ù', weight: 5, payout: 25 }
        ],
        space: [
            { symbol: 'üöÄ', weight: 15, payout: 10 },
            { symbol: 'üõ∏', weight: 10, payout: 15 },
            { symbol: 'üåü', weight: 20, payout: 5 },
            { symbol: 'ü™ê', weight: 10, payout: 15 },
            { symbol: 'üëΩ', weight: 5, payout: 25 },
            { symbol: 'üåå', weight: 15, payout: 10 },
            { symbol: '‚òÑÔ∏è', weight: 20, payout: 5 },
            { symbol: 'üå†', weight: 5, payout: 25 }
        ]
    };
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    const specialSymbols = {
        egypt: { wild: 'üßû', scatter: 'üìú' },
        fruits: { wild: 'üåà', scatter: 'üé∞' },
        space: { wild: 'üåÄ', scatter: 'üåç' }
    };
    
    let currentTheme = 'egypt';
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ—Ç–æ–≤
    initSlots();
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ 3D —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ —Å–ª–æ—Ç—ã
    slotContainer.addEventListener('mousemove', function(e) {
        if (isSpinning) return;
        
        const rect = slotContainer.getBoundingClientRect();
        const centerX = rect.left + rect.width / 2;
        const centerY = rect.top + rect.height / 2;
        
        const mouseX = e.clientX;
        const mouseY = e.clientY;
        
        const angleX = (mouseY - centerY) / 30;
        const angleY = (centerX - mouseX) / 30;
        
        slotScreen.style.transform = `perspective(1000px) rotateX(${angleX}deg) rotateY(${angleY}deg)`;
    });
    
    slotContainer.addEventListener('mouseleave', function() {
        if (isSpinning) return;
        slotScreen.style.transform = 'perspective(1000px) rotateX(0) rotateY(0)';
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é
    spinButton.addEventListener('click', function() {
        if (isSpinning) return;
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏
        this.classList.add('pulse-animation');
        setTimeout(() => {
            this.classList.remove('pulse-animation');
            startSpin();
        }, 300);
    });
    
    decreaseBetButton.addEventListener('click', function() {
        if (isSpinning) return;
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏
        this.classList.add('pulse-animation');
        setTimeout(() => {
            this.classList.remove('pulse-animation');
            decreaseBet();
        }, 300);
    });
    
    increaseBetButton.addEventListener('click', function() {
        if (isSpinning) return;
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏
        this.classList.add('pulse-animation');
        setTimeout(() => {
            this.classList.remove('pulse-animation');
            increaseBet();
        }, 300);
    });
    
    decreaseLinesButton.addEventListener('click', function() {
        if (isSpinning) return;
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏
        this.classList.add('pulse-animation');
        setTimeout(() => {
            this.classList.remove('pulse-animation');
            decreaseLines();
        }, 300);
    });
    
    increaseLinesButton.addEventListener('click', function() {
        if (isSpinning) return;
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏
        this.classList.add('pulse-animation');
        setTimeout(() => {
            this.classList.remove('pulse-animation');
            increaseLines();
        }, 300);
    });
    
    maxBetButton.addEventListener('click', function() {
        if (isSpinning) return;
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏
        this.classList.add('pulse-animation');
        setTimeout(() => {
            this.classList.remove('pulse-animation');
            setMaxBet();
        }, 300);
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é
    themeButtons.forEach(button => {
        button.addEventListener('click', function() {
            if (isSpinning) return;
            
            const theme = this.getAttribute('data-theme');
            
            // –ê–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏
            this.classList.add('pulse-animation');
            setTimeout(() => {
                this.classList.remove('pulse-animation');
                
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
                themeButtons.forEach(btn => btn.classList.remove('active'));
                this.classList.add('active');
                
                changeTheme(theme);
                
                // –ó–≤—É–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã
                playThemeChangeSound();
            }, 300);
        });
    });
    
    // –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–ª–æ—Ç–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –≤–∏–∑—É–∞–ª—å–Ω—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
    function initSlots() {
        // –û—á–∏—Å—Ç–∫–∞ —Å–µ—Ç–∫–∏
        slotGrid.innerHTML = '';
        
        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ—Ö —Ä—è–¥–æ–≤
        for (let i = 0; i < 3; i++) {
            const row = document.createElement('div');
            row.className = 'slot-row';
            
            // –°–æ–∑–¥–∞–Ω–∏–µ –ø—è—Ç–∏ —è—á–µ–µ–∫ –≤ –∫–∞–∂–¥–æ–º —Ä—è–¥—É
            for (let j = 0; j < 5; j++) {
                const cell = document.createElement('div');
                cell.className = 'slot-cell';
                
                // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ —Å —É—á–µ—Ç–æ–º –≤–µ—Å–æ–≤
                const symbol = getWeightedRandomSymbol();
                cell.textContent = symbol;
                
                // –îÔøΩÔøΩ–±–∞–≤–ª–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
                cell.addEventListener('mouseenter', function() {
                    if (isSpinning) return;
                    this.style.transform = 'scale(1.1)';
                    this.style.boxShadow = '0 0 15px rgba(212, 175, 55, 0.5)';
                    this.style.zIndex = '10';
                });
                
                cell.addEventListener('mouseleave', function() {
                    if (isSpinning) return;
                    this.style.transform = '';
                    this.style.boxShadow = '';
                    this.style.zIndex = '';
                });
                
                row.appendChild(cell);
            }
            
            slotGrid.appendChild(row);
        }
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ —Å –Ω–µ–±–æ–ª—å—à–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é
        addSpecialSymbols();
    }
    
    // –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ —Å —É—á–µ—Ç–æ–º –≤–µ—Å–æ–≤
    function getWeightedRandomSymbol() {
        const symbols = themeSymbols[currentTheme];
        const totalWeight = symbols.reduce((sum, item) => sum + item.weight, 0);
        let random = Math.random() * totalWeight;
        
        for (const item of symbols) {
            if (random < item.weight) {
                return item.symbol;
            }
            random -= item.weight;
        }
        
        return symbols[0].symbol; // Fallback
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    function addSpecialSymbols() {
        const rows = slotGrid.querySelectorAll('.slot-row');
        const special = specialSymbols[currentTheme];
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ Wild —Å–∏–º–≤–æ–ª–∞ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 5%
        if (Math.random() < 0.05) {
            const randomRow = Math.floor(Math.random() * 3);
            const randomCol = Math.floor(Math.random() * 5);
            
            const cell = rows[randomRow].querySelectorAll('.slot-cell')[randomCol];
            cell.textContent = special.wild;
            cell.classList.add('wild-symbol');
        }
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ Scatter —Å–∏–º–≤–æ–ª–∞ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 5%
        if (Math.random() < 0.05) {
            const randomRow = Math.floor(Math.random() * 3);
            const randomCol = Math.floor(Math.random() * 5);
            
            const cell = rows[randomRow].querySelectorAll('.slot-cell')[randomCol];
            if (!cell.classList.contains('wild-symbol')) {
                cell.textContent = special.scatter;
                cell.classList.add('scatter-symbol');
            }
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –≤—Ä–∞—â–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–µ–π
    function startSpin() {
        if (isSpinning) return;
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        const currentBalance = window.getBalance();
        const totalBet = betAmount * linesAmount;
        
        if (currentBalance < totalBet) {
            showWinMessage('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!', false);
            
            // –ê–Ω–∏–º–∞—Ü–∏—è –æ—Ç–∫–∞–∑–∞
            spinButton.classList.add('shake-animation');
            setTimeout(() => {
                spinButton.classList.remove('shake-animation');
            }, 500);
            
            return;
        }
        
        // –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞–≤–∫–∏
        window.updateBalance(-totalBet);
        
        isSpinning = true;
        spinButton.disabled = true;
        decreaseBetButton.disabled = true;
        increaseBetButton.disabled = true;
        decreaseLinesButton.disabled = true;
        increaseLinesButton.disabled = true;
        maxBetButton.disabled = true;
        
        // –°–±—Ä–æ—Å 3D —ç—Ñ—Ñ–µ–∫—Ç–∞ –≤–æ –≤—Ä–µ–º—è –≤—Ä–∞—â–µ–Ω–∏—è
        slotScreen.style.transform = 'perspective(1000px) rotateX(0) rotateY(0)';
        
        // –°–∫—Ä—ã—Ç–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—ã–∏–≥—Ä—ã—à–µ
        winMessageElement.classList.remove('show');
        winMessageElement.textContent = '';
        
        // –°–∫—Ä—ã—Ç–∏–µ –ª–∏–Ω–∏–π –≤—ã–ø–ª–∞—Ç
        paylines.forEach(payline => {
            payline.classList.remove('active');
        });
        
        // –ó–≤—É–∫ –∑–∞–ø—É—Å–∫–∞ –≤—Ä–∞—â–µ–Ω–∏—è
        playSpinStartSound();
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ñ–∏–∑–∏–∫–æ–π
        animateSlots();
    }
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ñ–∏–∑–∏–∫–æ–π
    function animateSlots() {
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö —è—á–µ–µ–∫
        const cells = document.querySelectorAll('.slot-cell');
        cells.forEach(cell => {
            cell.classList.add('spinning');
            
            // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç —Ä–∞–∑–º—ã—Ç–∏—è –ø—Ä–∏ –≤—Ä–∞—â–µ–Ω–∏–∏
            cell.style.filter = 'blur(2px)';
        });
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Ç–∫—É —Å —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
        const newGrid = [];
        for (let i = 0; i < 3; i++) {
            const row = [];
            for (let j = 0; j < 5; j++) {
                row.push(getWeightedRandomSymbol());
            }
            newGrid.push(row);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        addSpecialSymbolsToResult(newGrid);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è —Å —Ä–∞–∑–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
        setTimeout(() => {
            updateColumn(0, newGrid);
            playReelStopSound();
            
            setTimeout(() => {
                updateColumn(1, newGrid);
                playReelStopSound();
                
                setTimeout(() => {
                    updateColumn(2, newGrid);
                    playReelStopSound();
                    
                    setTimeout(() => {
                        updateColumn(3, newGrid);
                        playReelStopSound();
                        
                        setTimeout(() => {
                            updateColumn(4, newGrid);
                            playReelStopSound();
                            
                            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
                            setTimeout(() => {
                                checkWinningCombinations(newGrid);
                                
                                isSpinning = false;
                                spinButton.disabled = false;
                                decreaseBetButton.disabled = false;
                                increaseBetButton.disabled = false;
                                decreaseLinesButton.disabled = false;
                                increaseLinesButton.disabled = false;
                                maxBetButton.disabled = false;
                            }, 500);
                        }, 200);
                    }, 200);
                }, 200);
            }, 200);
        }, 1000);
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    function addSpecialSymbolsToResult(grid) {
        const special = specialSymbols[currentTheme];
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ Wild —Å–∏–º–≤–æ–ª–∞ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 10%
        if (Math.random() < 0.1) {
            const randomRow = Math.floor(Math.random() * 3);
            const randomCol = Math.floor(Math.random() * 5);
            grid[randomRow][randomCol] = special.wild;
        }
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ Scatter —Å–∏–º–≤–æ–ª–∞ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 10%
        if (Math.random() < 0.1) {
            const randomRow = Math.floor(Math.random() * 3);
            const randomCol = Math.floor(Math.random() * 5);
            
            if (grid[randomRow][randomCol] !== special.wild) {
                grid[randomRow][randomCol] = special.scatter;
            }
        }
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å—Ç–æ–ª–±—Ü–µ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–µ–π
    function updateColumn(colIndex, newGrid) {
        const rows = slotGrid.querySelectorAll('.slot-row');
        
        rows.forEach((row, rowIndex) => {
            const cells = row.querySelectorAll('.slot-cell');
            const cell = cells[colIndex];
            
            if (cell) {
                // –ê–Ω–∏–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–∞
                cell.style.transform = 'scale(0) rotateY(180deg)';
                cell.style.filter = 'blur(0)';
                cell.classList.remove('spinning');
                cell.classList.remove('wild-symbol');
                cell.classList.remove('scatter-symbol');
                
                setTimeout(() => {
                    cell.textContent = newGrid[rowIndex][colIndex];
                    
                    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
                    const special = specialSymbols[currentTheme];
                    if (newGrid[rowIndex][colIndex] === special.wild) {
                        cell.classList.add('wild-symbol');
                    } else if (newGrid[rowIndex][colIndex] === special.scatter) {
                        cell.classList.add('scatter-symbol');
                    }
                    
                    cell.classList.remove('highlight');
                    cell.style.transform = 'scale(1) rotateY(0)';
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –æ—Ç—Å–∫–æ–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
                    setTimeout(() => {
                        cell.classList.add('bounce-effect');
                        setTimeout(() => {
                            cell.classList.remove('bounce-effect');
                        }, 500);
                    }, 100);
                }, 150);
            }
        });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–µ–π
    function checkWinningCombinations(grid) {
        let totalWin = 0;
        const winningLines = [];
        const winningCells = [];
        const special = specialSymbols[currentTheme];
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–∏–Ω–∏–π)
        for (let i = 0; i < Math.min(3, linesAmount); i++) {
            const row = grid[i];
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ
            for (let j = 0; j < row.length - 2; j++) {
                const symbol = row[j];
                if (symbol === special.scatter) continue; // Scatter –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –æ–±—ã—á–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏—è—Ö
                
                let count = 1;
                let wildCount = 0;
                
                if (symbol === special.wild) {
                    wildCount = 1;
                }
                
                for (let k = j + 1; k < row.length; k++) {
                    if (row[k] === symbol || row[k] === special.wild) {
                        count++;
                        if (row[k] === special.wild) {
                            wildCount++;
                        }
                    } else {
                        break;
                    }
                }
                
                if (count >= 3) {
                    // –ù–∞—Ö–æ–¥–∏–º –≤—ã–ø–ª–∞—Ç—É –¥–ª—è —Å–∏–º–≤–æ–ª–∞
                    let payout = 0;
                    if (symbol !== special.wild) {
                        const symbolData = themeSymbols[currentTheme].find(s => s.symbol === symbol);
                        payout = symbolData ? symbolData.payout : 5; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ —Å–∏–º–≤–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
                    } else {
                        payout = 50; // –í—ã–ø–ª–∞—Ç–∞ –∑–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∏–∑ Wild —Å–∏–º–≤–æ–ª–æ–≤
                    }
                    
                    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã–ø–ª–∞—Ç—É, –µ—Å–ª–∏ –µ—Å—Ç—å Wild —Å–∏–º–≤–æ–ª—ã –≤ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
                    if (wildCount > 0 && symbol !== special.wild) {
                        payout *= (1 + wildCount * 0.5); // +50% –∑–∞ –∫–∞–∂–¥—ã–π Wild
                    }
                    
                    const lineWin = betAmount * count * payout / 10;
                    totalWin += lineWin;
                    winningLines.push(i);
                    
                    // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ —è—á–µ–π–∫–∏
                    for (let k = j; k < j + count; k++) {
                        winningCells.push({row: i, col: k, win: lineWin});
                    }
                    
                    break; // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –ª–∏–Ω–∏–∏
                }
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Scatter —Å–∏–º–≤–æ–ª—ã (–≤—ã–∏–≥—Ä—ã—à –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –ª–∏–Ω–∏–π)
        let scatterCount = 0;
        const scatterPositions = [];
        
        for (let i = 0; i < grid.length; i++) {
            for (let j = 0; j < grid[i].length; j++) {
                if (grid[i][j] === special.scatter) {
                    scatterCount++;
                    scatterPositions.push({row: i, col: j});
                }
            }
        }
        
        if (scatterCount >= 3) {
            const scatterWin = betAmount * linesAmount * scatterCount;
            totalWin += scatterWin;
            
            // –î–æ–±–∞–≤–ª—è–µ–º Scatter —Å–∏–º–≤–æ–ª—ã –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö —è—á–µ–µ–∫
            scatterPositions.forEach(pos => {
                winningCells.push({row: pos.row, col: pos.col, win: scatterWin / scatterCount, isScatter: true});
            });
            
            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –±–æ–Ω—É—Å–Ω—ã–µ –≤—Ä–∞—â–µ–Ω–∏—è (–≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ)
            setTimeout(() => {
                showBonusMessage(`–í—ã–ø–∞–ª–æ ${scatterCount} Scatter! –ë–æ–Ω—É—Å–Ω—ã–µ –≤—Ä–∞—â–µ–Ω–∏—è!`);
            }, 1500);
        }
        
        // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö —è—á–µ–µ–∫ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        if (winningCells.length > 0) {
            const rows = slotGrid.querySelectorAll('.slot-row');
            
            winningCells.forEach(({row, col, win, isScatter}) => {
                const rowElement = rows[row];
                const cells = rowElement.querySelectorAll('.slot-cell');
                const cell = cells[col];
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –ø–æ–¥—Å–≤–µ—Ç–∫–∏
                cell.classList.add('highlight');
                
                // –°–æ–∑–¥–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤—ã–∏–≥—Ä—ã—à–∞
                const winAmount = document.createElement('div');
                winAmount.className = 'win-amount';
                winAmount.textContent = `+${Math.round(win)}`;
                cell.appendChild(winAmount);
                
                setTimeout(() => {
                    winAmount.style.opacity = '1';
                    winAmount.style.transform = 'translateY(-20px)';
                }, 10);
                
                // –î–ª—è Scatter –¥–æ–±–∞–≤–ª—è–µ–º –æ—Å–æ–±—É—é –∞–Ω–∏–º–∞—Ü–∏—é
                if (isScatter) {
                    cell.classList.add('scatter-win');
                }
                
                // –£–¥–∞–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
                setTimeout(() => {
                    winAmount.style.opacity = '0';
                    setTimeout(() => {
                        if (cell.contains(winAmount)) {
                            cell.removeChild(winAmount);
                        }
                    }, 500);
                }, 3000);
            });
        }
        
        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –ª–∏–Ω–∏–π —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        winningLines.forEach((lineIndex, index) => {
            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π –ª–∏–Ω–∏–∏
            setTimeout(() => {
                paylines[lineIndex].classList.add('active');
                
                // –ó–≤—É–∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ª–∏–Ω–∏–∏
                playLineWinSound();
            }, index * 300);
        });
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if (totalWin > 0) {
            // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –¥—Ä–∞–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
            setTimeout(() => {
                window.updateBalance(totalWin);
                showWinMessage(`–í—ã–∏–≥—Ä—ã—à! +${Math.round(totalWin)}`, true);
                
                // –ó–≤—É–∫ –≤—ã–∏–≥—Ä—ã—à–∞
                playWinSound(totalWin);
                
                // –ê–Ω–∏–º–∞—Ü–∏—è –º–æ–Ω–µ—Ç –ø—Ä–∏ –∫—Ä—É–ø–Ω–æ–º –≤—ã–∏–≥—Ä—ã—à–µ
                if (totalWin >= 100) {
                    createCoinAnimation();
                }
            }, 1000);
        } else {
            showWinMessage('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!', false);
            
            // –ó–≤—É–∫ –ø—Ä–æ–∏–≥—Ä—ã—à–∞
            playLoseSound();
        }
    }
    
    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—ã–∏–≥—Ä—ã—à–µ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–µ–π
    function showWinMessage(message, isWin) {
        winMessageElement.textContent = message;
        winMessageElement.classList.add('show');
        
        if (isWin) {
            winMessageElement.style.color = 'var(--win-color)';
            winMessageElement.style.textShadow = '0 0 10px rgba(255, 215, 0, 0.7)';
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –≤—ã–∏–≥—Ä—ã—à–∞
            winMessageElement.classList.add('win-animation');
            setTimeout(() => {
                winMessageElement.classList.remove('win-animation');
            }, 3000);
        } else {
            winMessageElement.style.color = 'var(--light-text)';
            winMessageElement.style.textShadow = 'none';
        }
    }
    
    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –±–æ–Ω—É—Å–µ
    function showBonusMessage(message) {
        const bonusMessage = document.createElement('div');
        bonusMessage.className = 'bonus-message';
        bonusMessage.textContent = message;
        
        slotScreen.appendChild(bonusMessage);
        
        setTimeout(() => {
            bonusMessage.classList.add('show');
        }, 10);
        
        // –ó–≤—É–∫ –±–æ–Ω—É—Å–∞
        playBonusSound();
        
        // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
        setTimeout(() => {
            bonusMessage.classList.remove('show');
            setTimeout(() => {
                slotScreen.removeChild(bonusMessage);
            }, 500);
        }, 4000);
    }
    
    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã —Å–ª–æ—Ç–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–µ–π
    function changeTheme(theme) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–µ–º—É –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞
        const oldTheme = currentTheme;
        currentTheme = theme;
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞
        slotScreen.style.opacity = '0';
        slotScreen.style.transform = 'scale(0.9)';
        
        setTimeout(() => {
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞
            slotScreen.className = `slot-screen ${theme}-theme`;
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
            const rows = slotGrid.querySelectorAll('.slot-row');
            rows.forEach((row, rowIndex) => {
                const cells = row.querySelectorAll('.slot-cell');
                cells.forEach((cell, colIndex) => {
                    // –ê–Ω–∏–º–∞—Ü–∏—è —Å–º–µ–Ω—ã —Å–∏–º–≤–æ–ª–∞
                    cell.style.transform = 'scale(0) rotateY(180deg)';
                    
                    setTimeout(() => {
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª
                        cell.textContent = getWeightedRandomSymbol();
                        cell.classList.remove('wild-symbol');
                        cell.classList.remove('scatter-symbol');
                        cell.classList.remove('highlight');
                        
                        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
                        cell.style.transform = 'scale(1) rotateY(0)';
                    }, 150 + (rowIndex * 100) + (colIndex * 50));
                });
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —è—á–µ–µ–∫
            setTimeout(() => {
                addSpecialSymbols();
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–æ—Ç—ã —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
                slotScreen.style.opacity = '1';
                slotScreen.style.transform = 'scale(1)';
            }, 800);
        }, 300);
    }
    
    // –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–∞–¥–∞—é—â–∏—Ö –º–æ–Ω–µ—Ç
    function createCoinAnimation() {
        const container = document.querySelector('.slots-game');
        const coinCount = 30;
        
        for (let i = 0; i < coinCount; i++) {
            const coin = document.createElement('div');
            coin.className = 'falling-coin';
            coin.innerHTML = 'ü™ô';
            coin.style.left = `${Math.random() * 100}%`;
            coin.style.animationDuration = `${1 + Math.random() * 2}s`;
            coin.style.animationDelay = `${Math.random() * 0.5}s`;
            coin.style.fontSize = `${Math.random() * 20 + 20}px`;
            
            container.appendChild(coin);
            
            // –£–¥–∞–ª–µ–Ω–∏–µ –º–æ–Ω–µ—Ç—ã –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
            setTimeout(() => {
                coin.remove();
            }, 3000);
        }
    }
    
    // –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞–≤–∫–æ–π –∏ –ª–∏–Ω–∏—è–º–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é
    function increaseBet() {
        if (betAmount < maxBet) {
            betAmount += 5;
            updateBetDisplay();
            playButtonSound();
        } else {
            // –ê–Ω–∏–º–∞—Ü–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –º–∞–∫—Å–∏–º—É–º–∞
            betAmountElement.classList.add('max-value-animation');
            setTimeout(() => {
                betAmountElement.classList.remove('max-value-animation');
            }, 500);
        }
    }
    
    function decreaseBet() {
        if (betAmount > minBet) {
            betAmount -= 5;
            updateBetDisplay();
            playButtonSound();
        } else {
            // –ê–Ω–∏–º–∞—Ü–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –º–∏–Ω–∏–º—É–º–∞
            betAmountElement.classList.add('min-value-animation');
            setTimeout(() => {
                betAmountElement.classList.remove('min-value-animation');
            }, 500);
        }
    }
    
    function increaseLines() {
        if (linesAmount < maxLines) {
            linesAmount += 1;
            updateLinesDisplay();
            playButtonSound();
            
            // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–∏–Ω–∏–π
            highlightActiveLines();
        } else {
            // –ê–Ω–∏–º–∞—Ü–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –º–∞–∫—Å–∏–º—É–º–∞
            linesAmountElement.classList.add('max-value-animation');
            setTimeout(() => {
                linesAmountElement.classList.remove('max-value-animation');
            }, 500);
        }
    }
    
    function decreaseLines() {
        if (linesAmount > minLines) {
            linesAmount -= 1;
            updateLinesDisplay();
            playButtonSound();
            
            // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–∏–Ω–∏–π
            highlightActiveLines();
        } else {
            // –ê–Ω–∏–º–∞—Ü–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –º–∏–Ω–∏–º—É–º–∞
            linesAmountElement.classList.add('min-value-animation');
            setTimeout(() => {
                linesAmountElement.classList.remove('min-value-animation');
            }, 500);
        }
    }
    
    function setMaxBet() {
        const oldBet = betAmount;
        const oldLines = linesAmount;
        
        betAmount = maxBet;
        linesAmount = maxLines;
        
        // –ê–Ω–∏–º–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
        if (oldBet !== maxBet) {
            updateBetDisplay(true);
        }
        
        if (oldLines !== maxLines) {
            updateLinesDisplay(true);
            highlightActiveLines();
        }
        
        playButtonSound();
    }
    
    // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–∏–Ω–∏–π
    function highlightActiveLines() {
        paylines.forEach((payline, index) => {
            if (index < linesAmount) {
                payline.classList.add('preview');
                
                setTimeout(() => {
                    payline.classList.remove('preview');
                }, 1000);
            }
        });
    }
    
    function updateBetDisplay(isMax = false) {
        const oldValue = parseInt(betAmountElement.textContent);
        const newValue = betAmount;
        
        if (oldValue !== newValue) {
            betAmountElement.classList.add('update-animation');
            
            setTimeout(() => {
                betAmountElement.textContent = newValue;
                
                if (isMax) {
                    betAmountElement.classList.add('max-value-animation');
                    setTimeout(() => {
                        betAmountElement.classList.remove('max-value-animation');
                    }, 500);
                }
                
                setTimeout(() => {
                    betAmountElement.classList.remove('update-animation');
                }, 300);
            }, 300);
        } else {
            betAmountElement.textContent = newValue;
        }
    }
    
    function updateLinesDisplay(isMax = false) {
        const oldValue = parseInt(linesAmountElement.textContent);
        const newValue = linesAmount;
        
        if (oldValue !== newValue) {
            linesAmountElement.classList.add('update-animation');
            
            setTimeout(() => {
                linesAmountElement.textContent = newValue;
                
                if (isMax) {
                    linesAmountElement.classList.add('max-value-animation');
                    setTimeout(() => {
                        linesAmountElement.classList.remove('max-value-animation');
                    }, 500);
                }
                
                setTimeout(() => {
                    linesAmountElement.classList.remove('update-animation');
                }, 300);
            }, 300);
        } else {
            linesAmountElement.textContent = newValue;
        }
    }
    
    // –ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã (–∑–∞–≥–ª—É—à–∫–∏, —Ç–∞–∫ –∫–∞–∫ –∑–≤—É–∫–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã)
    function playButtonSound() {
        console.log('Playing button sound');
    }
    
    function playSpinStartSound() {
        console.log('Playing spin start sound');
    }
    
    function playReelStopSound() {
        console.log('Playing reel stop sound');
    }
    
    function playWinSound(amount) {
        if (amount >= 500) {
            console.log('Playing big win sound');
        } else {
            console.log('Playing win sound');
        }
    }
    
    function playLoseSound() {
        console.log('Playing lose sound');
    }
    
    function playLineWinSound() {
        console.log('Playing line win sound');
    }
    
    function playBonusSound() {
        console.log('Playing bonus sound');
    }
    
    function playThemeChangeSound() {
        console.log('Playing theme change sound');
    }
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –¥–ª—è –Ω–æ–≤—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π
    const style = document.createElement('style');
    style.textContent = `
        @keyframes shake-animation {
            0%, 100% { transform: translateX(0); }
            10%, 30%, 50%, 70%, 90% { transform: translateX(-5px); }
            20%, 40%, 60%, 80% { transform: translateX(5px); }
        }
        
        @keyframes win-animation {
            0% { transform: scale(1); }
            50% { transform: scale(1.2); }
            100% { transform: scale(1); }
        }
        
        @keyframes update-animation {
            0% { transform: scale(1); opacity: 1; }
            50% { transform: scale(0.8); opacity: 0; }
            100% { transform: scale(1); opacity: 1; }
        }
        
        @keyframes max-value-animation {
            0%, 100% { color: var(--primary-color); }
            50% { color: var(--win-color); }
        }
        
        @keyframes min-value-animation {
            0%, 100% { color: var(--primary-color); }
            50% { color: var(--error-color); }
        }
        
        @keyframes bounce-effect {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.1); }
        }
        
        .shake-animation {
            animation: shake-animation 0.5s;
        }
        
        .win-animation {
            animation: win-animation 0.5s 3;
        }
        
        .update-animation {
            animation: update-animation 0.6s;
        }
        
        .max-value-animation {
            animation: max-value-animation 0.5s;
        }
        
        .min-value-animation {
            animation: min-value-animation 0.5s;
        }
        
        .bounce-effect {
            animation: bounce-effect 0.5s;
        }
        
        .wild-symbol {
            color: gold;
            text-shadow: 0 0 10px gold;
            animation: glow 1.5s infinite;
        }
        
        .scatter-symbol {
            color: #ff00ff;
            text-shadow: 0 0 10px #ff00ff;
            animation: glow 1.5s infinite;
        }
        
        .scatter-win {
            animation: jackpot 0.5s infinite;
        }
        
        .win-amount {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, 0);
            color: var(--win-color);
            font-weight: bold;
            font-size: 1.2rem;
            opacity: 0;
            transition: all 1s ease;
            text-shadow: 0 0 10px rgba(255, 215, 0, 0.7);
            pointer-events: none;
            z-index: 100;
        }
        
        .bonus-message {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%) scale(0);
            background: rgba(0, 0, 0, 0.8);
            color: var(--win-color);
            font-weight: bold;
            font-size: 1.5rem;
            padding: 20px 30px;
            border-radius: 10px;
            border: 2px solid var(--primary-color);
            box-shadow: 0 0 20px var(--primary-color);
            text-align: center;
            opacity: 0;
            transition: all 0.5s cubic-bezier(0.175, 0.885, 0.32, 1.275);
            z-index: 100;
        }
        
        .bonus-message.show {
            transform: translate(-50%, -50%) scale(1);
            opacity: 1;
        }
        
        .payline.preview {
            opacity: 0.5;
            animation: glow 1s;
        }
    `;
    document.head.appendChild(style);
});